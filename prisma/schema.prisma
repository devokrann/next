// npx prisma db push -> sync database

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// user model
model User {
    id        Int       @id @default(autoincrement())
    email     String    @unique
    password  String
    verified  Boolean   @default(false)
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    role      Role      @default(USER)
    posts     Post[]
    comments  Comment[]
    replies   Reply[]
    otps      Otp[]
    profile   Profile?
    session   Session?

    @@map(name: "users")
}

enum Role {
    USER
    ADMIN
}

// profile model
model Profile {
    id        Int      @id @default(autoincrement())
    name      String?
    dob       String?
    bio       String?
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    author    User     @relation(fields: [authorId], references: [email])
    authorId  String   @unique @map("author_id")

    @@map(name: "profiles")
}

// post model
model Post {
    id         Int        @id @default(autoincrement())
    title      String
    content    String
    published  Boolean    @default(false)
    createdAt  DateTime   @default(now()) @map(name: "created_at")
    updatedAt  DateTime   @updatedAt @map(name: "updated_at")
    author     User       @relation(fields: [authorId], references: [email])
    authorId   String     @unique @map("author_id")
    comments   Comment[]
    categories Category[]

    @@unique([authorId, title])
    @@map(name: "posts")
}

// category model
model Category {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    posts     Post[]

    @@map(name: "categories")
}

// comment model
model Comment {
    id        Int      @id @default(autoincrement())
    comment   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    author    User     @relation(fields: [authorId], references: [email])
    authorId  String   @unique @map("author_id")
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int      @unique @map("post_id")
    replies   Reply[]

    @@unique([postId, authorId, comment])
    @@map(name: "comments")
}

// reply model
model Reply {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    author    User     @relation(fields: [authorId], references: [email])
    authorId  String   @unique @map("author_id")
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int      @unique @map("comment_id")

    @@map(name: "replies")
}

// message model
model Message {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    phone     String
    subject   String
    message   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map("messages")
}

// session model
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expiredAt    DateTime @map(name: "expired_at")
    user         User     @relation(fields: [userId], references: [email], onDelete: Cascade)
    userId       String   @unique @map("user_id")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @updatedAt @map(name: "updated_at")

    @@map("sessions")
}

// category model
model Otp {
    id        Int      @id @default(autoincrement())
    otp       String
    expiredAt DateTime @map(name: "expired_at")
    user      User     @relation(fields: [userId], references: [email])
    userId    String   @unique @map("user_id")
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "otps")
}
