// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL") // uses connection pooling
  // directUrl = env("NEXT_DIRECT_URL") // uses a direct connection
}

// enums

enum Role {
  USER
  ADMIN
  DEV
}

enum Status {
  ACTIVE
  INACTIVE
  DRAFT
  PUBLISHED
}

enum Type {
  JWT
  OTP
}

enum SubType {
  // JWT
  PASSWORD_RESET
  SSO

  // OTP
  CONFIRM_EMAIL
  TWO_FACTOR_AUTH
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

// models

// auth models

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  verified Boolean @default(false)

  role    Role     @default(USER)
  status  Status   @default(ACTIVE)
  profile Profile?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  accounts  Account[]
  sessions  Session[]
  tokens    Token[]
  addresses Address[]
  posts     Post[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  refreshToken      String?  @map(name: "refresh_token")
  accessToken       String?  @map(name: "access_token")
  providerName      Provider @map(name: "provider_name")
  providerAccountId String   @map(name: "provider_account_id")
  expiresAt         DateTime @map(name: "expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([providerName, providerAccountId])
  @@map("accounts")
}

model Token {
  id        String   @id @default(cuid())
  token     String
  type      Type
  subType   SubType  @map(name: "sub_type")
  expiresAt DateTime @map(name: "expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([type, subType, userId])
  @@map(name: "tokens")
}

model Session {
  id        String   @id @default(cuid())
  ip        String
  os        String?
  city      String?
  country   String?
  loc       String?
  status    Status   @default(ACTIVE)
  expiresAt DateTime @map(name: "expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("sessions")
}

// non-auth models

model Profile {
  id     String  @id @default(cuid())
  name   String?
  bio    String?
  avatar String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("profiles")
}

model Address {
  id       String  @id @default(cuid())
  title    String?
  phone    String?
  province String?
  state    String?
  city     String
  country  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("addresses")
}

model Post {
  id            String  @id @default(cuid())
  image         String
  title         String
  content       String
  status        Status  @default(DRAFT)
  allowComments Boolean @default(true) @map(name: "allow_comments")
  anonymous     Boolean @default(false)

  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @map("user_id")
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?   @map("category_id")
  tags       Tag[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, title])
  @@map(name: "posts")
}

model Category {
  id    String @id @default(cuid())
  title String

  posts Post[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([title])
  @@map(name: "categories")
}

model Tag {
  id    String @id @default(cuid())
  title String

  posts Post[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([title])
  @@map(name: "tags")
}
