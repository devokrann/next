// npx prisma db push -> sync database

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
}

datasource db {
    // provider  = "mysql"
    // url       = env("DATABASE_URL")
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id              String    @id @default(uuid())
    name            String?
    email           String    @unique
    password        String?
    verified        Boolean   @default(false)
    emailVerified   DateTime? @map("email_verified")
    emailVerifToken String?   @map("email_verified_token")
    image           String?
    createdAt       DateTime  @default(now()) @map(name: "created_at")
    updatedAt       DateTime  @updatedAt @map(name: "updated_at")
    role            Role      @default(USER)
    posts           Post[]
    comments        Comment[]
    replies         Reply[]
    otps            Otp[]
    otls            Otl[]
    profile         Profile?
    sessions        Session[]
    accounts        Account[]

    @@map(name: "users")
}

enum Role {
    USER
    ADMIN
}

model Account {
    type              String
    provider          String
    providerAccountId String   @map(name: "provider_account_id")
    scope             String?
    sessionState      String?  @map(name: "session_state")
    id_token          String?  @db.Text
    token_type        String?
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?     @map(name: "expired_at")
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @updatedAt @map(name: "updated_at")
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String   @unique @map("user_id")

    @@id([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token") @db.Text
    accessToken  String?  @map("access_token") @db.Text
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @unique @map("user_id")
    expires      DateTime @map(name: "expired_at")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @updatedAt @map(name: "updated_at")

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @map(name: "expired_at")
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @updatedAt @map(name: "updated_at")

    @@id([identifier, token])
    @@map("verificationTokens")
}

model Otp {
    id        Int      @id @default(autoincrement())
    otp       String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id")
    expires   String   @map(name: "expired_at")
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "otps")
}

model Otl {
    id        Int      @id @default(autoincrement())
    otl       String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id")
    expires   String   @map(name: "expired_at")
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "otls")
}

model Profile {
    id        Int      @id @default(autoincrement())
    username  String?  @unique
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id")

    @@map(name: "profiles")
}

model Post {
    id         Int        @id @default(autoincrement())
    title      String
    content    String
    published  Boolean    @default(false)
    createdAt  DateTime   @default(now()) @map(name: "created_at")
    updatedAt  DateTime   @updatedAt @map(name: "updated_at")
    user       User       @relation(fields: [userId], references: [id])
    userId     String     @unique @map("user_id")
    comments   Comment[]
    categories Category[]

    @@unique([userId, title])
    @@map(name: "posts")
}

model Category {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    posts     Post[]

    @@map(name: "categories")
}

model Comment {
    id        Int      @id @default(autoincrement())
    comment   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id")
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int      @unique @map("post_id")
    replies   Reply[]

    @@unique([postId, userId, comment])
    @@map(name: "comments")
}

model Reply {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id")
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int      @unique @map("comment_id")

    @@map(name: "replies")
}

model Message {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    phone     String
    subject   String
    message   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map("messages")
}
