// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"] // enables postgresql extensions
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL") // uses connection pooling
  // directUrl = env("NEXT_DIRECT_URL") // uses a direct connection
}

enum UserRole {
  USER
  ADMINISTRATOR
  DEVELOPER
}

enum StatusUser {
  ACTIVE
  INACTIVE
}

enum StatusPost {
  DRAFT
  PUBLISHED
  INACTIVE
}

model User {
  id String @id @default(cuid())

  email         String    @unique
  verified      Boolean   @default(false)
  password      String?
  name          String?
  image         String?
  emailVerified DateTime? @map(name: "email_verified")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[] // Optional for WebAuthn support
  role          UserRole        @default(USER)
  status        StatusUser      @default(ACTIVE)
  posts         Post[]
  otps          Otp[]
  otls          Otl[]
  profile       Profile?

  @@map("users")
}

model Profile {
  id String @unique

  firstName String? @map(name: "first_name")
  lastName  String? @map(name: "last_name")
  bio       String?
  address   String?
  phone     String?
  city      String?
  state     String?
  country   String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("profiles")
}

// app models

model Post {
  id String @id @default(cuid())

  title         String
  content       String
  status        StatusPost @default(DRAFT)
  allowComments Boolean    @default(true) @map(name: "allow_comments")
  anonymous     Boolean    @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?   @unique @map("user_id")
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?   @map("category_id")
  tags       Tag[]

  @@unique([userId, title])
  @@map(name: "posts")
}

model Category {
  id String @id @default(cuid())

  title String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  posts Post[]

  @@unique([title])
  @@map(name: "categories")
}

model Tag {
  id String @id @default(cuid())

  title String @unique

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  posts Post[]

  @@map(name: "tags")
}

// auth models

enum OtpType {
  EMAIL_CONFIRMATION
  TWO_FACTOR_AUTHENTICATION
}

model Otp {
  id String @id @default(cuid())

  type      OtpType
  otp       String
  expiresAt DateTime @updatedAt @map(name: "expires_at")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@unique([userId, type])
  @@map(name: "otps")
}

enum OtlType {
  PASSWORD_RESET
}

model Otl {
  id String @id @default(cuid())

  type      OtlType
  otl       String
  expiresAt DateTime @updatedAt @map(name: "expires_at")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@unique([userId, type])
  @@map(name: "otls")
}

// auth.js models

model Account {
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map(name: "session_token")
  expires      DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map(name: "credential_id")
  providerAccountId    String  @map(name: "provider_account_id")
  credentialPublicKey  String  @map(name: "credential_public_key")
  counter              Int
  credentialDeviceType String  @map(name: "credential_device_type")
  credentialBackedUp   Boolean @map(name: "credential_backed_up")
  transports           String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map(name: "user_id")

  @@id([userId, credentialID])
  @@map("authenticators")
}
